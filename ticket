#!/bin/bash

######################################################
## Simple program to create a ticket (issue, bug)   ##
## in a plain text file in git root directery       ##
######################################################

## Configuration
# TODO export it to a separate ticket_setting.conf file
# in git repository top level
DIRECTORY="tickets/"
LABELS=("bug" "enhancement" "documentation")


function usage { 
    echo "Usage:"
    echo "  ticket -h                   Display this help message."
    echo "  ticket                      Add a new ticket."
    #echo "  ticket add                  Also add a new ticket."
    #echo "  ticket close <ticket_id>    Set <ticket_id> as closed."
    #echo "  ticket edit <ticket_id>     Open <ticket_id> in text editor."
    #echo "  ticket list                 List all tickets."
    #echo "  ticket list -o              List all open tickets."
    #echo "  ticket list -c              List all closed tickets."
    #echo "  ticket list -l <label>      List all tickets with label <label>."
    #echo "  ticket list -a <author>     List all tickets with author <author>."
    echo "  All commands must be called in a git repository."
    exit 0
}


function invalid_option { # $1 is $OPTARG
    echo "Invalid option: -$1" 1>&2
    exit 1
}


## We allow to show help from anywhere

## Parse options of `ticket` command
while getopts ":h" opt
do
    case ${opt} in
        h)
            usage
            ;;
        \?)
            invalid_option $OPTARG
            ;;
    esac
done
shift $((OPTIND -1))




## For rest of script, exit if we are not in git repository
repository=$(git rev-parse --is-inside-work-tree 2> /dev/null)
if [ "$repository" != "true" ]
then
	echo "Not in a git repository."
	echo "Exit"
	exit 1
fi
## Search git top level directory, cd to it.
cd "$(git rev-parse --show-toplevel)"

# TODOâ€¯search for conf file, and grab tickets location and labels from it, otherwise use <git_root>/tickets


## Set current git email as author
author=$(git config user.email)

## Prompt user for ticket title
read -p 'Title: ' title

## Promt user for ticket description
read -p 'Description: ' description


## Prompt user for ticket label
PS3="Select ticket label: "
select label in "${LABELS[@]}"
do
    if [ 1 -le "$REPLY" ] && [ "$REPLY" -le "${#LABELS[@]}" ]
    then
        echo "Label $label selected."
        break
    fi
    echo "Wrong selection, try again"
done

## Create tickets directory if necessary
mkdir -p $DIRECTORY

## Set ticket ID as UUID first 8 chars (for readability)
## Check if file exists, if so try another uuid. 
free=false
until [ $free == true ]
do
    id=$(uuidgen | cut -c1-8 | awk '{ print tolower($0) }')
    ticketpath=$DIRECTORY$id
    if [ ! -e $ticketpath ]; then
        free=true
    fi

done

## Save ticket
echo "ticket: $id" > $ticketpath
echo "author: $author" >> $ticketpath
echo "status: open" >> $ticketpath
echo "label: $label" >> $ticketpath
echo "title: $title" >> $ticketpath
echo "-----------" >> $ticketpath
echo "" >> $ticketpath
echo "$description" >> $ticketpath

## Show result
echo ""
echo ""
echo "Ticket saved as $id"
echo ""
cat $ticketpath
echo ""

