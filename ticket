#!/bin/bash

######################################################
## Simple program to create a ticket (issue, bug)   ##
## in a plain text file in git root directery       ##
######################################################

## Configuration
# TODO export it to a separate ticket_setting.conf file
# in git repository top level
DIRECTORY="tickets/"
LABELS=("bug" "enhancement" "documentation")


function usage { 
    echo "Usage:"
    echo "  ticket -h                   Display this help message."
    echo "  ticket                      Add a new ticket."
    #echo "  ticket add                  Also add a new ticket."
    #echo "  ticket close <ticket_id>    Set <ticket_id> as closed."
    #echo "  ticket edit <ticket_id>     Open <ticket_id> in text editor."
    #echo "  ticket list                 List all tickets."
    #echo "  ticket list -o              List all open tickets."
    #echo "  ticket list -c              List all closed tickets."
    #echo "  ticket list -l <label>      List all tickets with label <label>."
    #echo "  ticket list -a <author>     List all tickets with author <author>."
    exit 0
}


function invalid_option { # $1 is $OPTARG
    echo "Invalid option: -$1" 1>&2
    exit 1
}

function check_ticket_path { #$1 is ticket path, required
    if [ -z "$1" ]
    then
        echo "You must specified a ticket path."
        exit 1
    elif [ ! -e "$1" ]
    then
        echo "No such ticket file '$1'."
        exit 1
    fi
}

function add_ticket {
    ## Exit if we are not in git repository
    repository=$(git rev-parse --is-inside-work-tree 2> /dev/null)
    if [ "$repository" != "true" ]
    then
        echo "You must be inside a git repository to add new ticket."
        echo "Exit"
        exit 1
    fi
    ## Search git top level directory, cd to it.
    cd "$(git rev-parse --show-toplevel)"

    # TODOâ€¯search for conf file, and grab tickets location and labels from it, otherwise use <git_root>/tickets

    ## Set current git email as author
    author=$(git config user.email)

    ## Prompt user for ticket title
    read -p 'Title: ' title

    ## Promt user for ticket description
    read -p 'Description: ' description

    ## Prompt user for ticket label
    PS3="Select ticket label: "
    select label in "${LABELS[@]}"
    do
        if [ 1 -le "$REPLY" ] && [ "$REPLY" -le "${#LABELS[@]}" ]
        then
            echo "Label $label selected."
            break
        fi
        echo "Wrong selection, try again"
    done

    ## Create tickets directory if necessary
    mkdir -p $DIRECTORY

    ## Set ticket ID as UUID first 8 chars (for readability)
    ## Check if file exists, if so try another uuid. 
    free=false
    until [ $free == true ]
    do
        id=$(uuidgen | cut -c1-8 | awk '{ print tolower($0) }')
        ticketpath=$DIRECTORY$id
        if [ ! -e $ticketpath ]; then
            free=true
        fi

    done

    ## Save ticket
    echo "ticket: $id" > $ticketpath
    echo "author: $author" >> $ticketpath
    echo "status: open" >> $ticketpath
    echo "label: $label" >> $ticketpath
    echo "title: $title" >> $ticketpath
    echo "-----------" >> $ticketpath
    echo "" >> $ticketpath
    echo "$description" >> $ticketpath

    ## Show result
    echo ""
    echo ""
    echo "Ticket saved as $id"
    echo ""
    cat $ticketpath
    echo ""
    exit 0
}

function close_ticket { #$1 is ticket path, required
    check_ticket_path $1
    echo "Close ticket"
    exit 0
}

function edit_ticket { #$1 is ticket path, required
    check_ticket_path $1
    echo "Edit ticket"
    exit 0
}




## Parse options of `ticket` command
while getopts ":h" opt
do
    case ${opt} in
        h)
            usage
            ;;
        \?)
            invalid_option $OPTARG
            ;;
    esac
done
shift $((OPTIND -1))


subcommand=$1
shift # remove `ticket` from list


## if we have no subcommand
if [ -z "$subcommand" ]
then
    add_ticket
fi


## Parse subcommand
case "$subcommand" in
    add)
        add_ticket
        ;;

    close)
        close_ticket $1
        ;;

    edit)
        edit_ticket $1
        ;;

    list)
        echo "List tickets"
        ;; 
esac



