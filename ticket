#!/bin/bash

######################################################
## Simple program to create a ticket (issue, bug)   ##
## in a plain text file in git root directery       ##
######################################################

## Configuration
# TODO export it to a separate ticket_setting.conf file
# in git repository top level
DIRECTORY="tickets/"
LABELS=("bug" "enhancement" "documentation")
SETTINGS=".ticket.conf"


function usage { 
    echo "Usage:"
    echo "  ticket -h                       Display this help message."
    echo "  ticket                          Add a new ticket."
    echo "  ticket add                      Also add a new ticket."
    echo "  ticket close <ticket_path>      Set <ticket_path> as closed."
    echo "  ticket open <ticket_path>       Set <ticket_path> as open."
    echo "  ticket edit <ticket_path>       Open <ticket_path> in text editor."
    echo "  ticket list                     Print list of all tickets."
    echo "  ticket list -s [open | closed]  Print list of open or closed tickets."
    echo "  ticket list -l <label>          List all tickets with label <label>."
    echo "  ticket list -a <author>         List all tickets with author <author>."
    exit 0
}


function invalid_option { # $1 is $OPTARG
    echo "Invalid option: -$1" 1>&2
    exit 1
}


function check_ticket_path { #$1 is ticket path, required
    if [ -z "$1" ]
    then
        echo "You must specified a ticket path."
        exit 1
    elif [ ! -e "$1" ]
    then
        echo "No such ticket file '$1'."
        exit 1
    fi

    ## check if file is a ticket file
    line=$(head -n 1 $1 | cut -c1-7)

    if [ "$line" != "ticket:" ]
    then
        echo "File '$1' doesn't seem to be a ticket."
        exit 1
    fi
}

function cd_to_repository_top_level {
    ## Exit if we are not in git repository
    repository=$(git rev-parse --is-inside-work-tree 2> /dev/null)
    if [ "$repository" != "true" ]
    then
        echo "You must be inside a git repository to add new ticket."
        echo "Exit"
        exit 1
    fi
    ## Search git top level directory, cd to it.
    cd "$(git rev-parse --show-toplevel)"

    ## Create tickets directory if necessary
    mkdir -p $DIRECTORY

    ## Load settings
    if [ -e "$SETTINGS" ]
    then
        . $SETTINGS
    fi
}


function add_ticket {
    cd_to_repository_top_level

    ## Set current git email as author
    author=$(git config user.email)

    ## Prompt user for ticket title
    read -p 'Title: ' title

    ## Promt user for ticket description
    read -p 'Description: ' description

    ## Prompt user for ticket label
    PS3="Select ticket label: "
    select label in "${LABELS[@]}"
    do
        if [ 1 -le "$REPLY" ] && [ "$REPLY" -le "${#LABELS[@]}" ]
        then
            echo "Label $label selected."
            break
        fi
        echo "Wrong selection, try again"
    done

    ## Set ticket ID as UUID first 8 chars (for readability)
    ## Check if file exists, if so try another uuid. 
    free=false
    until [ $free == true ]
    do
        id=$(uuidgen | cut -c1-8 | awk '{ print tolower($0) }')
        ticketpath=$DIRECTORY$id
        if [ ! -e $ticketpath ]; then
            free=true
        fi

    done

    ## Save ticket
    echo "ticket: $id" > $ticketpath
    echo "author: $author" >> $ticketpath
    echo "status: open" >> $ticketpath
    echo "label: $label" >> $ticketpath
    echo "title: $title" >> $ticketpath
    echo "-----------" >> $ticketpath
    echo "" >> $ticketpath
    echo "$description" >> $ticketpath

    ## Show result
    echo ""
    echo ""
    echo "Ticket saved as $id"
    echo ""
    cat $ticketpath
    echo ""
    exit 0
}


function close_ticket { #$1 is ticket path, required
    check_ticket_path $1
    status=$(sed '3q;d' $1 | cut -c9-)
    id=$(sed '1q;d' $1 | cut -c9-) 
    
    if [ "$status" == "closed" ]
    then
        echo "Ticket '$id' is already closed."
        exit 0
    fi
    sed -i '' '3s/.*/status: closed/' $1
    echo "Closed ticket '$id'"
    exit 0
}


function open_ticket { #$1 is ticket path, required
    check_ticket_path $1
    status=$(sed '3q;d' $1 | cut -c9-)
    id=$(sed '1q;d' $1 | cut -c9-) 
    
    if [ "$status" == "open" ]
    then
        echo "Ticket '$id' is already open."
        exit 0
    fi
    sed -i '' '3s/.*/status: open/' $1
    echo "Opened ticket '$id'"
    exit 0
}


function edit_ticket { #$1 is ticket path, required
    check_ticket_path $1
    $EDITOR $1
    exit 0
}


function list_tickets {
    cd_to_repository_top_level
    cd $DIRECTORY

    echo "Status filter: $STATUS_FILTER"
    if [ ! -z $STATUS_FILTER ]
    then
        if [ "$STATUS_FILTER" == "closed" ]
        then
            echo "List closed tickets"
        elif [ "$STATUS_FILTER" == "open" ]
        then
            echo "List open tickets"
        else
            echo "Error: '$STATUS_FILTER' is not a valid argument for '-s' option."
            echo "Valid arguments are 'open' or 'closed'."
            exit 1
        fi
    fi

    format="%-10s%-8s%-10s%s\n"
    separator="----------------------------------------"
    printf $format "Id" "Status" "Label" "Title"
    printf "%s\n" $separator
    
    counter=0
    for ticket in $(ls -t)
    do
        id=$(sed '1q;d' $ticket | cut -c9-) 
        status=$(sed '3q;d' $ticket | cut -c9-)
        title=$(sed '5q;d' $ticket | cut -c8-)
        label=$(sed '4q;d' $ticket | cut -c8-)
        author=$(sed '2q;d' $ticket | cut -c9-)
        
        wraplabel=$label
        if [ ${#label} -gt 8 ]
        then
            wraplabel="$(echo $label | cut -c1-5)..."
        fi
       
        ## Apply status filter
        if [ ! -z $STATUS_FILTER ] && [ $STATUS_FILTER != "$status" ]
        then
            continue
        fi

        ## Apply label filter
        if [ ! -z $LABEL_FILTER ] && [ $LABEL_FILTER != "$label" ]
        then
            continue
        fi

        ## Apply author filter
        if [ ! -z $AUTHOR_FILTER ] && [ $AUTHOR_FILTER != "$author" ]
        then
            continue
        fi


        printf $format $id $status "$wraplabel" "$title"
        ((counter++))
    done
    
    printf "%s\n" $separator
    if [ $counter -gt 1 ]
    then
        echo "Total: $counter tickets."
    else
        echo "Total: $counter ticket."
    fi

    exit 0
}




## Parse options of `ticket` command
while getopts ":h" opt
do
    case ${opt} in
        h)
            usage
            ;;
        \?)
            invalid_option $OPTARG
            ;;
    esac
done
shift $((OPTIND -1))


subcommand=$1
shift # remove `ticket` from arguments list


## if we have no subcommand
if [ -z "$subcommand" ]
then
    add_ticket
fi


## Parse subcommand
case "$subcommand" in
    add)
        add_ticket
        ;;

    close)
        close_ticket $1
        ;;

    open)
        open_ticket $1
        ;;

    edit)
        edit_ticket $1
        ;;

    list)
        ## Process list options
        while getopts ":s:l:a:" opt
        do
            case ${opt} in
                s)
                    STATUS_FILTER=$OPTARG
                    ;;
                l)
                    LABEL_FILTER=$OPTARG
                    ;;
                a)
                    AUTHOR_FILTER=$OPTARG
                    ;;
                \?)
                    invalid_option $OPTARG
                    ;;
                :)
                    echo "Invalid Option: -$OPTARG requires an argument" 1>&2
                    exit 1
                    ;;
            esac
        done
        shift $((OPTIND -1))
        list_tickets

        ;; 
esac



